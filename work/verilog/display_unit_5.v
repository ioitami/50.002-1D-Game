/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module display_unit_5 (
    input clk,
    input rst,
    input sclock,
    input [2:0] ran_num,
    input [3:0] ox3,
    input [3:0] ox4,
    input [2:0] ox1,
    input [6:0] ox0,
    input [6:0] ox8,
    output reg [7:0] display,
    output reg [11:0] dataBOut,
    output reg [7:0] y_out,
    output reg [7:0] x_out,
    output reg [6:0] segscorelow,
    output reg [6:0] segscorehigh,
    output reg [6:0] seghighscorelow,
    output reg [6:0] seghighscorehigh
  );
  
  
  
  localparam ZERO = 7'h40;
  
  localparam ONE = 7'h79;
  
  localparam TWO = 7'h24;
  
  localparam THREE = 7'h30;
  
  localparam FOUR = 7'h19;
  
  localparam FIVE = 7'h12;
  
  localparam SIX = 7'h02;
  
  localparam SEVEN = 7'h78;
  
  localparam EIGHT = 7'h00;
  
  localparam NINE = 7'h18;
  
  localparam OFF = 7'h7f;
  
  localparam ID0 = 4'h0;
  
  localparam ID0_LEFT = 4'h0;
  
  localparam ID0_RIGHT = 4'h4;
  
  localparam ID0_DISPLAY = 8'h8f;
  
  localparam ID1 = 4'h1;
  
  localparam ID1_LEFT = 4'h3;
  
  localparam ID1_RIGHT = 4'h7;
  
  localparam ID1_DISPLAY = 8'hf1;
  
  localparam ID2 = 4'h2;
  
  localparam ID2_LEFT = 4'h2;
  
  localparam ID2_RIGHT = 4'h6;
  
  localparam ID2_DISPLAY = 8'he3;
  
  localparam ID3 = 4'h3;
  
  localparam ID3_LEFT = 4'h1;
  
  localparam ID3_RIGHT = 4'h4;
  
  localparam ID3_DISPLAY = 8'hcf;
  
  localparam ID4 = 4'h4;
  
  localparam ID4_LEFT = 4'h3;
  
  localparam ID4_RIGHT = 4'h8;
  
  localparam ID4_DISPLAY = 8'hf0;
  
  localparam ID5 = 4'h5;
  
  localparam ID5_LEFT = 4'h5;
  
  localparam ID5_RIGHT = 4'h8;
  
  localparam ID5_DISPLAY = 8'hfc;
  
  localparam ID6 = 4'h6;
  
  localparam ID6_LEFT = 4'h5;
  
  localparam ID6_RIGHT = 4'h7;
  
  localparam ID6_DISPLAY = 8'hfd;
  
  localparam ID7 = 4'h7;
  
  localparam ID7_LEFT = 4'h0;
  
  localparam ID7_RIGHT = 4'h2;
  
  localparam ID7_DISPLAY = 8'hbf;
  
  reg [6:0] M_valscore_d, M_valscore_q = 1'h0;
  reg [6:0] M_valhighscore_d, M_valhighscore_q = 1'h0;
  reg [6:0] M_storescore_d, M_storescore_q = 1'h0;
  reg [6:0] M_storehighscore_d, M_storehighscore_q = 1'h0;
  localparam S0_scoreloop = 1'd0;
  localparam S1_scoreloop = 1'd1;
  
  reg M_scoreloop_d, M_scoreloop_q = S0_scoreloop;
  localparam S0_highscoreloop = 1'd0;
  localparam S1_highscoreloop = 1'd1;
  
  reg M_highscoreloop_d, M_highscoreloop_q = S0_highscoreloop;
  
  reg [3:0] lowbit_a;
  
  reg [3:0] highbit_a;
  
  reg [3:0] lowbit_b;
  
  reg [3:0] highbit_b;
  
  always @* begin
    M_highscoreloop_d = M_highscoreloop_q;
    M_scoreloop_d = M_scoreloop_q;
    M_valscore_d = M_valscore_q;
    M_valhighscore_d = M_valhighscore_q;
    
    seghighscorelow = 1'h0;
    seghighscorehigh = 1'h0;
    segscorelow = 1'h0;
    segscorehigh = 1'h0;
    lowbit_a = 1'h0;
    highbit_a = 1'h0;
    lowbit_b = 1'h0;
    highbit_b = 1'h0;
    display = 1'h0;
    dataBOut = 1'h0;
    y_out = 1'h0;
    x_out = 1'h0;
    
    case (ran_num)
      4'h0: begin
        dataBOut[0+3-:4] = 4'h0;
        dataBOut[4+3-:4] = 4'h0;
        dataBOut[8+3-:4] = 4'h4;
      end
      4'h1: begin
        dataBOut[0+3-:4] = 4'h1;
        dataBOut[4+3-:4] = 4'h3;
        dataBOut[8+3-:4] = 4'h7;
      end
      4'h2: begin
        dataBOut[0+3-:4] = 4'h2;
        dataBOut[4+3-:4] = 4'h2;
        dataBOut[8+3-:4] = 4'h6;
      end
      4'h3: begin
        dataBOut[0+3-:4] = 4'h3;
        dataBOut[4+3-:4] = 4'h1;
        dataBOut[8+3-:4] = 4'h4;
      end
      4'h4: begin
        dataBOut[0+3-:4] = 4'h4;
        dataBOut[4+3-:4] = 4'h3;
        dataBOut[8+3-:4] = 4'h8;
      end
      4'h5: begin
        dataBOut[0+3-:4] = 4'h5;
        dataBOut[4+3-:4] = 4'h5;
        dataBOut[8+3-:4] = 4'h8;
      end
      4'h6: begin
        dataBOut[0+3-:4] = 4'h6;
        dataBOut[4+3-:4] = 4'h5;
        dataBOut[8+3-:4] = 4'h7;
      end
      4'h7: begin
        dataBOut[0+3-:4] = 4'h7;
        dataBOut[4+3-:4] = 4'h0;
        dataBOut[8+3-:4] = 4'h2;
      end
      default: begin
        dataBOut[0+3-:4] = 4'h2;
        dataBOut[4+3-:4] = 4'h2;
        dataBOut[8+3-:4] = 4'h6;
      end
    endcase
    
    case (ox3)
      4'h0: begin
        display = 8'h8f;
      end
      4'h1: begin
        display = 8'hf1;
      end
      4'h2: begin
        display = 8'he3;
      end
      4'h3: begin
        display = 8'hcf;
      end
      4'h4: begin
        display = 8'hf0;
      end
      4'h5: begin
        display = 8'hfc;
      end
      4'h6: begin
        display = 8'hfd;
      end
      4'h7: begin
        display = 8'hbf;
      end
      default: begin
        display = 8'he3;
      end
    endcase
    
    case (ox4)
      4'h7: begin
        y_out = 8'h3f;
      end
      4'h6: begin
        y_out = 8'h5f;
      end
      4'h5: begin
        y_out = 8'h6f;
      end
      4'h4: begin
        y_out = 8'h77;
      end
      4'h3: begin
        y_out = 8'h7b;
      end
      4'h2: begin
        y_out = 8'h7d;
      end
      4'h1: begin
        y_out = 8'h7e;
      end
      4'h0: begin
        y_out = 8'h7f;
      end
    endcase
    
    case (ox1)
      3'h0: begin
        x_out = 8'h80;
      end
      3'h1: begin
        x_out = 8'h40;
      end
      3'h2: begin
        x_out = 8'h20;
      end
      3'h3: begin
        x_out = 8'h10;
      end
      3'h4: begin
        x_out = 8'h08;
      end
      3'h5: begin
        x_out = 8'h04;
      end
      3'h6: begin
        x_out = 8'h02;
      end
      3'h7: begin
        x_out = 8'h01;
      end
    endcase
    if (sclock == 1'h1) begin
      M_valscore_d = ox0;
      M_valhighscore_d = ox8;
    end
    if (ox0 > 4'h9) begin
      highbit_a = ox0 / 4'ha;
    end else begin
      highbit_a = 1'h0;
    end
    if (ox8 > 4'h9) begin
      highbit_b = ox8 / 4'ha;
    end else begin
      highbit_b = 1'h0;
    end
    
    case (M_scoreloop_q)
      S0_scoreloop: begin
        if (M_valscore_q < 4'ha) begin
          lowbit_a = M_valscore_q;
        end else begin
          if (M_valscore_q >= 4'ha) begin
            M_valscore_d = M_valscore_q - 4'ha;
            M_scoreloop_d = S0_scoreloop;
          end
        end
      end
    endcase
    
    case (M_highscoreloop_q)
      S0_highscoreloop: begin
        if (M_valhighscore_q < 4'ha) begin
          lowbit_b = M_valhighscore_q;
        end else begin
          if (M_valhighscore_q >= 4'ha) begin
            M_valhighscore_d = M_valhighscore_q - 4'ha;
            M_highscoreloop_d = S0_highscoreloop;
          end
        end
      end
    endcase
    
    case (lowbit_a)
      4'h0: begin
        segscorelow = 7'h40;
      end
      4'h1: begin
        segscorelow = 7'h79;
      end
      4'h2: begin
        segscorelow = 7'h24;
      end
      4'h3: begin
        segscorelow = 7'h30;
      end
      4'h4: begin
        segscorelow = 7'h19;
      end
      4'h5: begin
        segscorelow = 7'h12;
      end
      4'h6: begin
        segscorelow = 7'h02;
      end
      4'h7: begin
        segscorelow = 7'h78;
      end
      4'h8: begin
        segscorelow = 7'h00;
      end
      4'h9: begin
        segscorelow = 7'h18;
      end
      default: begin
        segscorelow = 7'h7f;
      end
    endcase
    
    case (highbit_a)
      4'h0: begin
        segscorehigh = 7'h40;
      end
      4'h1: begin
        segscorehigh = 7'h79;
      end
      4'h2: begin
        segscorehigh = 7'h24;
      end
      4'h3: begin
        segscorehigh = 7'h30;
      end
      4'h4: begin
        segscorehigh = 7'h19;
      end
      4'h5: begin
        segscorehigh = 7'h12;
      end
      4'h6: begin
        segscorehigh = 7'h02;
      end
      4'h7: begin
        segscorehigh = 7'h78;
      end
      4'h8: begin
        segscorehigh = 7'h00;
      end
      4'h9: begin
        segscorehigh = 7'h18;
      end
      default: begin
        segscorehigh = 7'h7f;
      end
    endcase
    
    case (lowbit_b)
      4'h0: begin
        seghighscorelow = 7'h40;
      end
      4'h1: begin
        seghighscorelow = 7'h79;
      end
      4'h2: begin
        seghighscorelow = 7'h24;
      end
      4'h3: begin
        seghighscorelow = 7'h30;
      end
      4'h4: begin
        seghighscorelow = 7'h19;
      end
      4'h5: begin
        seghighscorelow = 7'h12;
      end
      4'h6: begin
        seghighscorelow = 7'h02;
      end
      4'h7: begin
        seghighscorelow = 7'h78;
      end
      4'h8: begin
        seghighscorelow = 7'h00;
      end
      4'h9: begin
        seghighscorelow = 7'h18;
      end
      default: begin
        seghighscorelow = 7'h7f;
      end
    endcase
    
    case (highbit_b)
      4'h0: begin
        seghighscorehigh = 7'h40;
      end
      4'h1: begin
        seghighscorehigh = 7'h79;
      end
      4'h2: begin
        seghighscorehigh = 7'h24;
      end
      4'h3: begin
        seghighscorehigh = 7'h30;
      end
      4'h4: begin
        seghighscorehigh = 7'h19;
      end
      4'h5: begin
        seghighscorehigh = 7'h12;
      end
      4'h6: begin
        seghighscorehigh = 7'h02;
      end
      4'h7: begin
        seghighscorehigh = 7'h78;
      end
      4'h8: begin
        seghighscorehigh = 7'h00;
      end
      4'h9: begin
        seghighscorehigh = 7'h18;
      end
      default: begin
        seghighscorehigh = 7'h7f;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_valscore_q <= 1'h0;
      M_valhighscore_q <= 1'h0;
      M_storescore_q <= 1'h0;
      M_storehighscore_q <= 1'h0;
      M_scoreloop_q <= 1'h0;
      M_highscoreloop_q <= 1'h0;
    end else begin
      M_valscore_q <= M_valscore_d;
      M_valhighscore_q <= M_valhighscore_d;
      M_storescore_q <= M_storescore_d;
      M_storehighscore_q <= M_storehighscore_d;
      M_scoreloop_q <= M_scoreloop_d;
      M_highscoreloop_q <= M_highscoreloop_d;
    end
  end
  
endmodule
