/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_game_10 (
    input clk,
    input rst,
    input sclock,
    input [0:0] left,
    input [0:0] right,
    input [15:0] raout,
    input [15:0] rbout,
    output reg [0:0] write_enable,
    output reg [3:0] ra,
    output reg [3:0] rb,
    output reg [1:0] asel,
    output reg [1:0] bsel,
    output reg [1:0] wdsel,
    output reg [5:0] alufn,
    output reg [3:0] regID
  );
  
  
  
  localparam S0_controller = 5'd0;
  localparam S0A_controller = 5'd1;
  localparam S0B_controller = 5'd2;
  localparam S0C_controller = 5'd3;
  localparam S1_controller = 5'd4;
  localparam S2_controller = 5'd5;
  localparam S2A_controller = 5'd6;
  localparam S3_controller = 5'd7;
  localparam S4_controller = 5'd8;
  localparam S4A_controller = 5'd9;
  localparam S4B_controller = 5'd10;
  localparam S5A_controller = 5'd11;
  localparam S5B_controller = 5'd12;
  localparam S6A_controller = 5'd13;
  localparam S6B_controller = 5'd14;
  localparam S7_controller = 5'd15;
  localparam S7A_controller = 5'd16;
  localparam S8_controller = 5'd17;
  localparam S8A_controller = 5'd18;
  localparam S9_controller = 5'd19;
  localparam S9A_controller = 5'd20;
  localparam S10_controller = 5'd21;
  localparam S11_controller = 5'd22;
  
  reg [4:0] M_controller_d, M_controller_q = S0_controller;
  
  always @* begin
    M_controller_d = M_controller_q;
    
    write_enable = 1'h0;
    ra = 1'h0;
    rb = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    wdsel = 1'h0;
    alufn = 1'h0;
    regID = 1'h0;
    
    case (M_controller_q)
      S0_controller: begin
        write_enable = 1'h1;
        ra = 4'h8;
        rb = 4'h0;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        alufn = 6'h35;
        regID = 4'h7;
        M_controller_d = S0A_controller;
      end
      S0A_controller: begin
        write_enable = 1'h0;
        ra = 4'h7;
        if (raout == 1'h1) begin
          M_controller_d = S0B_controller;
        end else begin
          M_controller_d = S0C_controller;
        end
      end
      S0B_controller: begin
        write_enable = 1'h1;
        ra = 4'h0;
        asel = 2'h0;
        bsel = 2'h1;
        wdsel = 2'h0;
        alufn = 6'h00;
        regID = 4'h8;
        M_controller_d = S0C_controller;
      end
      S0C_controller: begin
        write_enable = 1'h1;
        asel = 2'h1;
        bsel = 2'h1;
        wdsel = 2'h0;
        alufn = 6'h00;
        regID = 4'h0;
        M_controller_d = S1_controller;
      end
      S1_controller: begin
        write_enable = 1'h1;
        asel = 2'h2;
        bsel = 2'h1;
        wdsel = 2'h0;
        alufn = 6'h00;
        regID = 4'h1;
        M_controller_d = S2_controller;
      end
      S2_controller: begin
        write_enable = 1'h1;
        asel = 2'h1;
        bsel = 2'h3;
        wdsel = 2'h0;
        alufn = 6'h00;
        regID = 4'h4;
        M_controller_d = S3_controller;
      end
      S3_controller: begin
        write_enable = 1'h1;
        wdsel = 2'h1;
        regID = 4'hf;
        M_controller_d = S4_controller;
      end
      S4_controller: begin
        if (sclock == 1'h1 && left == 1'h1 && right == 1'h1) begin
          M_controller_d = S7_controller;
        end else begin
          if (sclock == 1'h1 && left == 1'h1) begin
            M_controller_d = S4A_controller;
          end else begin
            if (sclock == 1'h1 && right == 1'h1) begin
              M_controller_d = S4B_controller;
            end else begin
              if (sclock == 1'h1) begin
                M_controller_d = S7_controller;
              end
            end
          end
        end
      end
      S4A_controller: begin
        write_enable = 1'h1;
        ra = 4'h1;
        asel = 2'h0;
        bsel = 2'h2;
        wdsel = 2'h0;
        alufn = 6'h01;
        regID = 4'h1;
        M_controller_d = S5A_controller;
      end
      S4B_controller: begin
        write_enable = 1'h1;
        ra = 4'h1;
        asel = 2'h0;
        bsel = 2'h2;
        wdsel = 2'h0;
        alufn = 6'h00;
        regID = 4'h1;
        M_controller_d = S5A_controller;
      end
      S5A_controller: begin
        write_enable = 1'h1;
        rb = 4'h1;
        asel = 2'h1;
        bsel = 2'h0;
        wdsel = 2'h0;
        alufn = 6'h37;
        regID = 4'h7;
        M_controller_d = S5B_controller;
      end
      S5B_controller: begin
        write_enable = 1'h0;
        ra = 4'h7;
        if (raout == 1'h1) begin
          M_controller_d = S6A_controller;
        end else begin
          M_controller_d = S0_controller;
        end
      end
      S6A_controller: begin
        write_enable = 1'h1;
        ra = 4'h1;
        asel = 2'h0;
        bsel = 2'h3;
        wdsel = 2'h0;
        alufn = 6'h37;
        regID = 4'h7;
        M_controller_d = S6B_controller;
      end
      S6B_controller: begin
        write_enable = 1'h0;
        ra = 4'h7;
        if (raout == 1'h1) begin
          M_controller_d = S7_controller;
        end else begin
          M_controller_d = S0_controller;
        end
      end
      S7_controller: begin
        write_enable = 1'h1;
        ra = 4'h4;
        asel = 2'h0;
        bsel = 2'h2;
        wdsel = 2'h0;
        alufn = 6'h01;
        regID = 4'h4;
        M_controller_d = S7A_controller;
      end
      S7A_controller: begin
        write_enable = 1'h0;
        ra = 4'h4;
        if (raout != 1'h0) begin
          M_controller_d = S4_controller;
        end else begin
          if (raout == 1'h0) begin
            M_controller_d = S8_controller;
          end
        end
      end
      S8_controller: begin
        write_enable = 1'h1;
        ra = 4'h5;
        rb = 4'h1;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        alufn = 6'h35;
        regID = 4'h7;
        M_controller_d = S8A_controller;
      end
      S8A_controller: begin
        write_enable = 1'h0;
        ra = 4'h7;
        if (raout == 1'h1) begin
          M_controller_d = S9_controller;
        end else begin
          M_controller_d = S0_controller;
        end
      end
      S9_controller: begin
        write_enable = 1'h1;
        ra = 4'h1;
        rb = 4'h6;
        asel = 2'h0;
        bsel = 2'h0;
        wdsel = 2'h0;
        alufn = 6'h35;
        regID = 4'h7;
        M_controller_d = S9A_controller;
      end
      S9A_controller: begin
        write_enable = 1'h0;
        ra = 4'h7;
        if (raout == 1'h1) begin
          M_controller_d = S10_controller;
        end else begin
          M_controller_d = S0_controller;
        end
      end
      S10_controller: begin
        write_enable = 1'h1;
        ra = 4'h0;
        asel = 2'h0;
        bsel = 2'h2;
        wdsel = 2'h0;
        alufn = 6'h00;
        regID = 4'h0;
        M_controller_d = S2_controller;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_controller_q <= 1'h0;
    end else begin
      M_controller_q <= M_controller_d;
    end
  end
  
endmodule
