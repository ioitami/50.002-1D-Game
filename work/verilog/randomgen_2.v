/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module randomgen_2 (
    input clk,
    input rst,
    input [1:0] ox2,
    output reg [4:0] out
  );
  
  
  
  wire [32-1:0] M_rangen_num;
  reg [1-1:0] M_rangen_rst;
  reg [1-1:0] M_rangen_next;
  reg [32-1:0] M_rangen_seed;
  pn_gen_4 rangen (
    .clk(clk),
    .rst(M_rangen_rst),
    .next(M_rangen_next),
    .seed(M_rangen_seed),
    .num(M_rangen_num)
  );
  
  reg [4:0] M_regnum_d, M_regnum_q = 1'h0;
  
  always @* begin
    M_regnum_d = M_regnum_q;
    
    M_rangen_next = 1'h0;
    M_rangen_rst = 1'h0;
    M_rangen_seed = 1'h1;
    
    case (ox2)
      2'h0: begin
        M_rangen_rst = 1'h1;
        M_regnum_d = M_rangen_num[8+3-:4];
      end
      2'h1: begin
        M_rangen_next = 1'h1;
        M_regnum_d = M_rangen_num[8+3-:4];
      end
      2'h2: begin
        M_rangen_next = 1'h0;
      end
      2'h3: begin
        M_regnum_d = 5'h1f;
      end
      default: begin
        M_regnum_d = 5'h1f;
      end
    endcase
    out = M_regnum_q;
  end
  
  always @(posedge clk) begin
    M_regnum_q <= M_regnum_d;
  end
  
endmodule
