module display_unit (
    input clk,
    input rst,
    input sclock,
    
    input ran_num[3],
    input ox3[4],
    input ox4[4],
    input ox1[3],
    
    input ox0[7], //SCORE
    input ox8[7], //HIGHSCORE
    
    output display[8],
    output dataBOut[12],
    output y_out[8],
    
    output x_out[8],
    output segscorelow[7],
    output segscorehigh[7],
    output seghighscorelow[7],
    output seghighscorehigh[7]
    
  ) {
  //7-SEG CONVERTER
  const ZERO = 7b1000000;
  const ONE = 7b1111001;
  const TWO = 7b0100100;
  const THREE = 7b0110000;
  const FOUR = 7b0011001;
  const FIVE = 7b0010010;
  const SIX = 7b0000010;
  const SEVEN = 7b1111000;
  const EIGHT = 7b0000000;
  const NINE = 7b0011000;
  const OFF = 7b1111111;
  
  //HARD CODED OBSTACLES
  //---------------------------------
  //ID = 0
  const ID0 = b0000;
  const ID0_LEFT = b0000;
  const ID0_RIGHT = b0100;
  const ID0_DISPLAY = 8b10001111;
  
  //ID = 1
  const ID1 = b0001;
  const ID1_LEFT = b0011;
  const ID1_RIGHT = b0111;
  const ID1_DISPLAY = 8b11110001;
  
  //ID = 2
  const ID2 = b0010;
  const ID2_LEFT = b0010;
  const ID2_RIGHT = b0110;
  const ID2_DISPLAY = 8b11100011;
  
  //ID = 3
  const ID3 = b0011;
  const ID3_LEFT = b0001;
  const ID3_RIGHT = b0100;
  const ID3_DISPLAY = 8b11001111;
  
  //ID = 4
  const ID4 = b0100;
  const ID4_LEFT = b0011;
  const ID4_RIGHT = b1000;
  const ID4_DISPLAY = 8b11110000;
  
  //ID = 5
  const ID5 = b0101;
  const ID5_LEFT = b0101;
  const ID5_RIGHT = b1000;
  const ID5_DISPLAY = 8b11111100;
  
  //ID = 6
  const ID6 = b0110;
  const ID6_LEFT = b0101;
  const ID6_RIGHT = b0111;
  const ID6_DISPLAY = 8b11111101;
  
  //ID = 7
  const ID7 = b0111;
  const ID7_LEFT = b0000;
  const ID7_RIGHT = b0010;
  const ID7_DISPLAY = 8b10111111;
  

  
  .clk(clk){
    .rst(rst){
        dff valscore[7];
        dff valhighscore[7];
      
        dff storescore[7];
        dff storehighscore[7];
      
        fsm scoreloop = {S0, S1};
        fsm highscoreloop = {S0, S1};
      }
    }
  
  sig lowbit_a[4];
  sig highbit_a[4];
  sig lowbit_b[4];
  sig highbit_b[4];
  
  
  always {
    
    seghighscorelow = 0;
    seghighscorehigh = 0;
    segscorelow = 0;
    segscorehigh = 0;
    
    lowbit_a = 0;
    highbit_a = 0;
    lowbit_b = 0;
    highbit_b = 0;
        
    display[7:0] = 0;
    dataBOut = 0;
    y_out = 0;
    x_out = 0;
  
    case(ran_num){
    b0000:
      dataBOut[3:0] = ID0; //OBSTACLE ID
      dataBOut[7:4] = ID0_LEFT; //OBSTACLE SAFE LEFT
      dataBOut[11:8] = ID0_RIGHT; //OBSTACLE SAFE RIGHT
      
    b0001:
      dataBOut[3:0] = ID1;
      dataBOut[7:4] = ID1_LEFT;
      dataBOut[11:8] = ID1_RIGHT;

    b0010:
      dataBOut[3:0] = ID2;
      dataBOut[7:4] = ID2_LEFT;
      dataBOut[11:8] = ID2_RIGHT;
    
    b0011:
      dataBOut[3:0] = ID3;
      dataBOut[7:4] = ID3_LEFT;
      dataBOut[11:8] = ID3_RIGHT;
        
    b0100:
      dataBOut[3:0] = ID4;
      dataBOut[7:4] = ID4_LEFT;
      dataBOut[11:8] = ID4_RIGHT;

    b0101:
      dataBOut[3:0] = ID5;
      dataBOut[7:4] = ID5_LEFT;
      dataBOut[11:8] = ID5_RIGHT;
        
    b0110:
      dataBOut[3:0] = ID6;
      dataBOut[7:4] = ID6_LEFT;
      dataBOut[11:8] = ID6_RIGHT;
        
    b0111:
      dataBOut[3:0] = ID7;
      dataBOut[7:4] = ID7_LEFT;
      dataBOut[11:8] = ID7_RIGHT;
        
    default:
      dataBOut[3:0] = ID2;
      dataBOut[7:4] = ID2_LEFT;
      dataBOut[11:8] = ID2_RIGHT;    
    }
    
    //CONVERT OBSTACLES INTO DISPLAY
    case(ox3){
    b0000:  display = ID0_DISPLAY;
    b0001:  display = ID1_DISPLAY;
    b0010:  display = ID2_DISPLAY;
    b0011:  display = ID3_DISPLAY;
    b0100:  display = ID4_DISPLAY;
    b0101:  display = ID5_DISPLAY;  
    b0110:  display = ID6_DISPLAY;
    b0111:  display = ID7_DISPLAY;
        
    default:display = ID2_DISPLAY;
    }
    
    //CONVERT Y OBSTACLE VALUE INTO DISPLAY
    case(ox4){
    b0111:  y_out = 8b00111111;
    b0110:  y_out = 8b01011111;
    b0101:  y_out = 8b01101111;
    b0100:  y_out = 8b01110111;
    b0011:  y_out = 8b01111011;
    b0010:  y_out = 8b01111101;
    b0001:  y_out = 8b01111110;
    b0000:  y_out = 8b01111111;
    }
    
    //CONVERT X-VALUE INTO PLAYER DISPLAY
    case(ox1){
      b000: x_out = 8b10000000;
      b001: x_out = 8b01000000;
      b010: x_out = 8b00100000;
      b011: x_out = 8b00010000;
      b100: x_out = 8b00001000;
      b101: x_out = 8b00000100;
      b110: x_out = 8b00000010;
      b111: x_out = 8b00000001;
    }
    
    
    //CONVERT BINARY SCORE INTO DECIMALS
    if(sclock == b1){ //Update every clk cycle
      valscore.d = ox0;
      valhighscore.d = ox8;      
      }     
    
    if(ox0 > b1001){
      highbit_a = ox0 / b1010;
    }  
    else{highbit_a = b0;}

        
    if(ox8 > b1001){
      highbit_b = ox8 / b1010;
    }
    else{highbit_b = b0;}
    
    
    case(scoreloop.q){   
    //WHILE LOOP   
      scoreloop.S0:
      
        if(valscore.q < b1010){
          lowbit_a = valscore.q;
        }        
        else if(valscore.q >= b1010){       
          valscore.d = valscore.q - b1010; 
                    
          scoreloop.d = scoreloop.S0; 
        } 
    }
    
    case(highscoreloop.q){   
    //WHILE LOOP   
      highscoreloop.S0:
      
        if(valhighscore.q < b1010){
          lowbit_b = valhighscore.q;
        }        
        else if(valhighscore.q >= b1010){       
          valhighscore.d = valhighscore.q - b1010; 
                    
          highscoreloop.d = highscoreloop.S0; 
        } 
    }

    
    //CONVERT SCORES
       case(lowbit_a){
        b0000: segscorelow = ZERO;
        b0001: segscorelow = ONE;
        b0010: segscorelow = TWO;
        b0011: segscorelow = THREE;
        b0100: segscorelow = FOUR;
        b0101: segscorelow = FIVE;
        b0110: segscorelow = SIX;
        b0111: segscorelow = SEVEN;
        b1000: segscorelow = EIGHT;
        b1001: segscorelow = NINE;
      
        default: segscorelow = OFF;
      }
      case(highbit_a){
        b0000: segscorehigh = ZERO;
        b0001: segscorehigh = ONE;
        b0010: segscorehigh = TWO;
        b0011: segscorehigh = THREE;
        b0100: segscorehigh = FOUR;
        b0101: segscorehigh = FIVE;
        b0110: segscorehigh = SIX;
        b0111: segscorehigh = SEVEN;
        b1000: segscorehigh = EIGHT;
        b1001: segscorehigh = NINE;
      
        default: segscorehigh = OFF;
      }
      case(lowbit_b){
        b0000: seghighscorelow = ZERO;
        b0001: seghighscorelow = ONE;
        b0010: seghighscorelow = TWO;
        b0011: seghighscorelow = THREE;
        b0100: seghighscorelow = FOUR;
        b0101: seghighscorelow = FIVE;
        b0110: seghighscorelow = SIX;
        b0111: seghighscorelow = SEVEN;
        b1000: seghighscorelow = EIGHT;
        b1001: seghighscorelow = NINE;
      
        default: seghighscorelow = OFF;
      }
      case(highbit_b){
        b0000: seghighscorehigh = ZERO;
        b0001: seghighscorehigh = ONE;
        b0010: seghighscorehigh = TWO;
        b0011: seghighscorehigh = THREE;
        b0100: seghighscorehigh = FOUR;
        b0101: seghighscorehigh = FIVE;
        b0110: seghighscorehigh = SIX;
        b0111: seghighscorehigh = SEVEN;
        b1000: seghighscorehigh = EIGHT;
        b1001: seghighscorehigh = NINE;
      
        default: seghighscorehigh = OFF;
      }
}
