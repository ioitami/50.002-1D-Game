module betacpu (
    input clk,  // clock
    input rst,  // reset
    
    input left[1],
    input right[1],
    
    output player_x[8],
    output player_scorelow[7],
    output player_scorehigh[7],
    output player_highscorelow[7],
    output player_highscorehigh[7],
    output y_loc[4],
    
    output x_display[8],
    output y_view[8]
  ) {

  alu bitalu;
   
  
  .clk(clk) {    
  
    edge_detector clock_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      display_unit display;
      
      counter slowtimer_slow(#SIZE(1),#DIV(26)); //SlowClk
      counter slowtimer_medium(#SIZE(1),#DIV(25)); //MediumClk
      counter slowtimer_fast(#SIZE(1),#DIV(24)); //FastClk
      
      regfile reg;
      fsm_game gamefsm;
      randomgen rantest;
    }
  }
  
  
  always {

    //SLOWCLOCK INPUTS
    //Swap slowclk (make game faster) as the game progresses
    //============================================
    clock_detector.in = 0;
    gamefsm.sclock = 0;
    display.sclock = 0;
    
    if(reg.ox0 < b11){ //< 3
      clock_detector.in = slowtimer_slow.value;
      gamefsm.sclock = clock_detector.out;
      display.sclock = clock_detector.out;
      }
    else if(reg.ox0 >= b11 && reg.ox0 < b1010){ //< 3 and > 10
      clock_detector.in = slowtimer_medium.value;
      gamefsm.sclock = clock_detector.out;
      display.sclock = clock_detector.out;
      }
    else if(reg.ox0 >= b1010){ //> 10
      clock_detector.in = slowtimer_fast.value;
      gamefsm.sclock = clock_detector.out;
      display.sclock = clock_detector.out;
      }
    //============================================
    
    //FSM INPUTS
    //============================================
    gamefsm.left = left;
    gamefsm.right = right;
    gamefsm.raout = reg.raOut;
    gamefsm.rbout = reg.rbOut;
    //============================================
    
    //DISPLAY UNIT INPUTS
    //============================================
    display.ox0 = reg.ox0;
    display.ox1 = reg.ox1;
    display.ox3 = reg.ox3;
    display.ox4 = reg.ox4;
    display.ox8 = reg.ox8;
    display.ran_num = rantest.out[3:0];
    //============================================
       
    //ALU INPUTS   
    //============================================ 
    case(gamefsm.asel){
      2b00:
        bitalu.a = reg.raOut;
      2b01:
        bitalu.a = 1b0;
      2b10:
        bitalu.a = 2b11;
      default:
        bitalu.a = 0;
    }
    
    case(gamefsm.bsel){
      2b00:
        bitalu.b = reg.rbOut;
      2b01:
        bitalu.b = 1b0;
      2b10:
        bitalu.b = 1b1;
      2b11:
        bitalu.b = 3b111;
      default:
        bitalu.b = 0;
    }    
    bitalu.alufn_signal = gamefsm.alufn;
    //============================================
   
    //WDSEL MULTIPLEXER
    //============================================
    case(gamefsm.wdsel){
      2b00:
        reg.dataIn = bitalu.out;
      2b01:
        reg.dataIn = display.dataBOut;
      default:
        reg.dataIn = 0;
    }
    //============================================
    
    //REGFILE INPUTS
    //============================================
    reg.write_enable = gamefsm.write_enable;
    reg.regID = gamefsm.regID;
    
    reg.ra = gamefsm.ra;
    reg.rb = gamefsm.rb;
    //============================================
    
    //>>>>>>>> BETACPU OUTPUTS <<<<<<<<<<
    //============================================
    player_scorelow = display.segscorelow;
    player_scorehigh = display.segscorehigh;
    player_highscorelow = display.seghighscorelow;
    player_highscorehigh = display.seghighscorehigh;
    
    player_x = display.x_out;
    y_loc = reg.ox4;
    
    x_display = display.display;
    y_view = display.y_out;
  }
}
