module regfile (
    input clk,  // clock
    input regID[4],
    input dataIn[16],
    input write_enable[1],
    input ra[4],
    input rb[4],
    
    output raOut[16], 
    output rbOut[16],
    
    output ox0[10], //Player Score Output
    output ox1[4], //Player Location Output
    output ox4[4] //Obstacle Height Output
    
    //output ox8[10] //High Score  

  ) {
  dff registers[9][16](.clk(clk));

  
  always {
  //Update first if write_enable == 1 before outputting result for next clk cycle 
    
    if(write_enable == 1b1){
    
       //If special RegID 1111, write all obstacle data at once
       case(regID){
        b1111:
         registers.d[3][3:0] = dataIn[3:0]; //Obstacle ID

         registers.d[5][3:0] = dataIn[11:8]; //SafeLeft
         registers.d[6][3:0] = dataIn[15:12]; //SafeRight
        b0000:
         registers.d[0] = dataIn; //Player Score
        b0001:
         registers.d[1] = dataIn; //Player X location 
        b0011:
         registers.d[3] = dataIn; //Obstacle ID
        b0100:
         registers.d[4] = dataIn; //Obstacle Y-Location
        b0101:
         registers.d[5] = dataIn; //Safe Edge Left
        b0110:
         registers.d[6] = dataIn; //Safe Edge Right
        b0111:
         registers.d[7] = dataIn; //Temp Var 
        b1000:
         registers.d[8] = dataIn; //High Score 
       }
       
      }
    //RA OUTPUT
    case(ra){
      b0000: raOut = registers.q[0];
      b0001: raOut = registers.q[1];
      b0010: raOut = registers.q[2];
      b0011: raOut = registers.q[3];
      b0100: raOut = registers.q[4];
      b0101: raOut = registers.q[5];
      b0110: raOut = registers.q[6];
      b0111: raOut = registers.q[7];
      b1000: raOut = registers.q[8];
      
      default: raOut = 0;
    }
    
    //RB OUTPUT
    case(rb){
      b0000: rbOut = registers.q[0];
      b0001: rbOut = registers.q[1];
      b0010: rbOut = registers.q[2];
      b0011: rbOut = registers.q[3];
      b0100: rbOut = registers.q[4];
      b0101: rbOut = registers.q[5];
      b0110: rbOut = registers.q[6];
      b0111: rbOut = registers.q[7];
      b1000: rbOut = registers.q[8];
      
      default: rbOut = 0;
    }
    
    ox0 = registers.q[0][9:0];
    ox1 = registers.q[1][3:0];
    ox4 = registers.q[4][3:0];
     
  //------------------------------------------
    
}
