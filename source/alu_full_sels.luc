module alu_full_sels (

    input alufn[6],
    //ASEL INPUTS
    input asel[2],
    input raout[16],
    //BSEL INPUTS
    input bsel[2],
    input rbout[16],
    //WDSEL INPUTS
    input wdsel[2],
    input obstacle_data[16],
    //ALU out
    output wdsel_out[16]
    
  ) {
  alu bitalu;
  
  always {
    
    //ASEL MULTIPLEXER
    case(asel){
      2b00:
        bitalu.a = raout;
      2b01:
        bitalu.a = 1b0;
      2b10:
        bitalu.a = 2b11;
      default:
        bitalu.a = 0;
    }
    
    //BSEL MULTIPLEXER
    case(bsel){
      2b00:
        bitalu.b = rbout;
      2b01:
        bitalu.b = 1b0;
      2b10:
        bitalu.b = 1b1;
      2b11:
        bitalu.b = 3b111;
      default:
        bitalu.b = 0;
    }
    
    //ALU INPUT OUTPUTS
    bitalu.alufn_signal = alufn;
   
    //WDSEL MULTIPLEXER
    case(wdsel){
      2b00:
        wdsel_out = bitalu.out;
      2b01:
        wdsel_out = obstacle_data;
      default:
        wdsel_out = 0;
    }
  }
}
