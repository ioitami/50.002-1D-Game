module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output    
    output io_led [3][8],
    
    input io_dip [3][8]     // DIP switches on IO Shield
    
    //output y_value[8]
  ) {
  
  sig rst;   // reset signal
  
  regfile reg(.clk(clk));
  fsm_game gamefsm(.clk(clk), .rst(rst));
  alu_full_sels alu16;
  obstacle_library obs;  
  randomgen rantest(.clk(clk),.rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }

  
  always {  
      
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    //FSM INPUTS
    gamefsm.left = b0;
    gamefsm.right = b0;
    gamefsm.raout = reg.raOut;
    gamefsm.rbout = reg.rbOut;
    
    //OBSTACLE LIBRARY UNIT INPUTS
    obs.ox4 = reg.ox4;
    obs.ran_num = rantest.out;
    
    //ALU INPUTS
    alu16.raout = reg.raOut;
    alu16.rbout = reg.rbOut;
    alu16.obstacle_data = obs.dataBOut;
    
    alu16.alufn = gamefsm.alufn;
    alu16.asel = gamefsm.asel;
    alu16.bsel = gamefsm.bsel;
    alu16.wdsel = gamefsm.wdsel;
    
    //REGFILE INPUTS
    reg.write_enable = gamefsm.write_enable;
    reg.regID = gamefsm.regID;
    reg.dataIn = alu16.wdsel_out;
    
    reg.ra = gamefsm.ra;
    reg.rb = gamefsm.rb;
    
    //io_led[0][3:0] = reg.dataOutA[13:10]; //Player X Value
    //io_led[1][7:0] = obs.y_out; //Y Display
    io_led[0][3:0] = reg.ox0;
    io_led[0][7:4] = reg.ox1;
    io_led[1][3:0] = reg.ox4;
    io_led[2][3:0] = obs.dataBOut[7:4];
    io_led[2][7:4] = obs.dataBOut[11:8];

  }
}