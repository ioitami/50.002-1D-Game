module randomgen (
    input clk,
    input rst,
    input ox2[2],
    output out[5]
  ) {
  
  pn_gen rangen(.clk(clk));
  dff regnum[5](.clk(clk));
  
  const SLOWCLOCK_SIZE = 27;
  counter slowClock(#SIZE(SLOWCLOCK_SIZE), .clk(clk), .rst(rst));
  edge_detector slowClockEdge(#RISE(1), #FALL(0), .clk(clk));
  
  always {
    slowClockEdge.in = slowClock.value[SLOWCLOCK_SIZE-1];
    
    rangen.next = 1b0;
    rangen.rst = 1b0;
    rangen.seed = b1;
    
    if(slowClockEdge.out == b1){
    
    case(ox2){
      b00:
        rangen.rst = 1b1;
        regnum.d = rangen.num[11:8];
        
      b01:          
        rangen.next = 1;
        regnum.d = rangen.num[11:8];
        
      b10:
        rangen.next = 0;
        
      b11:
        regnum.d = b11111;
          
      default:
        regnum.d = b11111;
    }
      
    }
    out = regnum.q;

  }
}
